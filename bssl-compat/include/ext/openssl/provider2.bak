/*
 * Copyright 2019-2023 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef EXT_OPENSSL_PROVIDER_H
#define EXT_OPENSSL_PROVIDER_H
#pragma once

#include <openssl/core.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Define basic structures */
typedef struct ossl_provider_st OSSL_PROVIDER;
typedef struct ossl_lib_ctx_st OSSL_LIB_CTX;

struct ossl_algorithm_st {
    const char *algorithm_names;
    const char *property_definition;
    const void *implementation;
    const char *operation_id;
};
typedef struct ossl_algorithm_st OSSL_ALGORITHM;

/* Set and Get a library context search path */
#define ossl_OSSL_PROVIDER_set_default_search_path OSSL_PROVIDER_set_default_search_path
#define ossl_OSSL_PROVIDER_get0_default_search_path OSSL_PROVIDER_get0_default_search_path

int OSSL_PROVIDER_set_default_search_path(OSSL_LIB_CTX *, const char *path);
const char *OSSL_PROVIDER_get0_default_search_path(OSSL_LIB_CTX *libctx);

/* Load and unload a provider */
#define ossl_OSSL_PROVIDER_load OSSL_PROVIDER_load
#define ossl_OSSL_PROVIDER_load_ex OSSL_PROVIDER_load_ex
#define ossl_OSSL_PROVIDER_try_load OSSL_PROVIDER_try_load
#define ossl_OSSL_PROVIDER_try_load_ex OSSL_PROVIDER_try_load_ex
#define ossl_OSSL_PROVIDER_unload OSSL_PROVIDER_unload
#define ossl_OSSL_PROVIDER_available OSSL_PROVIDER_available
#define ossl_OSSL_PROVIDER_do_all OSSL_PROVIDER_do_all

OSSL_PROVIDER *OSSL_PROVIDER_load(OSSL_LIB_CTX *, const char *name);
OSSL_PROVIDER *OSSL_PROVIDER_load_ex(OSSL_LIB_CTX *, const char *name,
                                    OSSL_PARAM *params);
OSSL_PROVIDER *OSSL_PROVIDER_try_load(OSSL_LIB_CTX *, const char *name,
                                     int retain_fallbacks);
OSSL_PROVIDER *OSSL_PROVIDER_try_load_ex(OSSL_LIB_CTX *, const char *name,
                                        OSSL_PARAM *params,
                                        int retain_fallbacks);
int OSSL_PROVIDER_unload(OSSL_PROVIDER *prov);
int OSSL_PROVIDER_available(OSSL_LIB_CTX *, const char *name);
int OSSL_PROVIDER_do_all(OSSL_LIB_CTX *ctx,
                        int (*cb)(OSSL_PROVIDER *provider, void *cbdata),
                        void *cbdata);

/* Parameter functions */
#define ossl_OSSL_PROVIDER_gettable_params OSSL_PROVIDER_gettable_params
#define ossl_OSSL_PROVIDER_get_params OSSL_PROVIDER_get_params
#define ossl_OSSL_PROVIDER_self_test OSSL_PROVIDER_self_test
#define ossl_OSSL_PROVIDER_get_capabilities OSSL_PROVIDER_get_capabilities

const OSSL_PARAM *OSSL_PROVIDER_gettable_params(const OSSL_PROVIDER *prov);
int OSSL_PROVIDER_get_params(const OSSL_PROVIDER *prov, OSSL_PARAM params[]);
int OSSL_PROVIDER_self_test(const OSSL_PROVIDER *prov);
int OSSL_PROVIDER_get_capabilities(const OSSL_PROVIDER *prov,
                                  const char *capability,
                                  OSSL_CALLBACK *cb,
                                  void *arg);

/* Operation functions */
const OSSL_ALGORITHM *ossl_OSSL_PROVIDER_query_operation(const OSSL_PROVIDER *prov,
                                                       int operation_id,
                                                       void *no_cache);

void ossl_OSSL_PROVIDER_unquery_operation(const OSSL_PROVIDER *prov,
                                        int operation_id,
                                        void *algs);
#define ossl_OSSL_PROVIDER_get0_provider_ctx OSSL_PROVIDER_get0_provider_ctx
#define ossl_OSSL_PROVIDER_get0_dispatch OSSL_PROVIDER_get0_dispatch

const OSSL_ALGORITHM *OSSL_PROVIDER_query_operation(const OSSL_PROVIDER *prov,
                                                  int operation_id,
                                                  void **no_cache);
void OSSL_PROVIDER_unquery_operation(const OSSL_PROVIDER *prov,
                                   int operation_id,
                                   void *algs);
void *OSSL_PROVIDER_get0_provider_ctx(const OSSL_PROVIDER *prov);
const OSSL_DISPATCH *OSSL_PROVIDER_get0_dispatch(const OSSL_PROVIDER *prov);

/* Built-in provider functions */
#define ossl_OSSL_PROVIDER_add_builtin OSSL_PROVIDER_add_builtin

int OSSL_PROVIDER_add_builtin(OSSL_LIB_CTX *, const char *name,
                             OSSL_provider_init_fn *init_fn);

/* Information functions */
#define ossl_OSSL_PROVIDER_get0_name OSSL_PROVIDER_get0_name

const char *OSSL_PROVIDER_get0_name(const OSSL_PROVIDER *prov);

#ifdef __cplusplus
}
#endif

#endif /* EXT_OPENSSL_PROVIDER_H */